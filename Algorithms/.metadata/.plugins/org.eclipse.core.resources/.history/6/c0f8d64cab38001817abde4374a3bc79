import org.junit.Test;

public class CompetitionTests {

	//hmm imo since i implemented djikstra using arrays(still implements the algorithm) the differences
	//would be less noticeable.
	//djikstra isnt made for shortes path between all points but from one point.
	//it is probably better for sparse graphs compared to floyd
	//since floyd is exhaustive
	//the benefit of djikstra comes from less memory usage as you only need to store an extra 
	//min pq with entries to be updated rather than an entire adjacency table
	//As well as it is a continous algorithm that allows one to discover the shortest path
	//between one point to any other point in the graph starting from that point
    @Test
    public void testDijkstraConstructor() {
    	CompetitionDijkstra graph = new CompetitionDijkstra("./tinyEWD.txt",50,60,70);
    	System.out.println(graph.timeRequiredforCompetition());
    	graph = new CompetitionDijkstra("./1000EWD.txt",50,60,70);
    	System.out.println(graph.timeRequiredforCompetition());
    }

    @Test
    public void testFWConstructor() {
    	CompetitionFloydWarshall graph = new CompetitionFloydWarshall("./tinyEWD.txt",50,60,70);
    	System.out.println(graph.timeRequiredforCompetition());
    	graph = new CompetitionFloydWarshall("./1000EWD.txt",50,60,70);
    	System.out.println(graph.timeRequiredforCompetition());
    }

    //TODO - more tests
    
}
