// -------------------------------------------------------------------------

/**
 *  This class contains static methods that implementing sorting of an array of numbers
 *  using different sort algorithms.
 *
 *  @author
 *  @version HT 2018
 */

 class SortComparison {

    /**
     * Sorts an array of doubles using InsertionSort.
     * This method is static, thus it can be called as SortComparison.sort(a)
     * @param a: An unsorted array of doubles.
     * @return array sorted in ascending order.
     *
     */
    static double [] insertionSort (double a[]){
    	
        //todo: implement the sort
    	int i,j;
    	double index;
    	
    	for(i=1;i<a.length;i++)
    	{
    		index = a[i];
    		j=i;
    		while((j>0) && (a[j-1]>index))
    		{
    			swap(a,j,j-1);
    			j=j-1;
    		}
    		a[j] = index;
    	}
    	return a;
    }//end insertionsort

    /**
     * Sorts an array of doubles using Quick Sort.
     * This method is static, thus it can be called as SortComparison.sort(a)
     * @param a: An unsorted array of doubles.
     * @return array sorted in ascending order
     *
     */
    static double [] quickSort (double a[]){
	
		 //todo: implement the sort
    	int lo = 0,hi = a.length-1;
    	qSort(a,lo,hi);
    	return a;
    }//end quicksort
    
    static private void qSort(double a[],int lo,int hi)
    {
    	int i = lo,j = hi;
    	double pivot = pickPivot(a,lo,hi);
    	for(int n = lo;n<=hi;)
    	{
    		if(a[n]<pivot)
    		{
    			swap(a,i,n);
    			i++;
    		}
    		else if(a[n] > pivot)
    		{
    			swap(a,j,n);
    			j--;
    		}
    		else
    			n++;
    	}
    	if(lo < i)
    		qSort(a,lo,i);
    	if(j< hi)
    		qSort(a,j,hi);
    	
    }
    
    static private double pickPivot(double a[],int lo,int hi)
    {
    	double low = a[lo],medium,high;
    	if(a[hi] < low)
    	{
    		medium = low;
    		low = a[hi];
    	}
    	else
    		medium = a[hi];
    	if(a[lo + (hi-lo)/2] < low)
    	{
    		high = medium;
    		medium = low;
    		low = a[lo + (hi-lo)/2];
    	}
    	else if(a[lo + (hi-lo)/2] < medium)
    	{
    		high = medium;
    		medium = a[lo + (hi-lo)/2];
    	}
    	else
    		high = a[lo + (hi-lo)/2];
    	return medium;
    }

    /**
     * Sorts an array of doubles using Merge Sort.
     * This method is static, thus it can be called as SortComparison.sort(a)
     * @param a: An unsorted array of doubles.
     * @return array sorted in ascending order
     *
     */
    static double [] mergeSort (double a[]){

		 //todo: implement the sort
    	return a;
    }//end mergesort

    /**
     * Sorts an array of doubles using Shell Sort.
     * This method is static, thus it can be called as SortComparison.sort(a)
     * @param a: An unsorted array of doubles.
     * @return array sorted in ascending order
     *
     */
    static double [] shellSort (double a[]){

		 //todo: implement the sort
    	 int h = 1;
    	 while(h<a.length/3)
    		 h = 3*h + 1; 
    	 // goes through sequences 1/2 (3^k - 1)
    	 
    	 while(h >= 1)
    	 {
    		 for(int i=h;i< a.length; i++)
    		 {
    			 for(int j=i;j>= h && (a[j] < a[j-h]); j-= h)
    				 swap(a,j,j-h);
    		 }
    		 
    		 h = h/3;
    	 }
		 return a;
    }//end shellsort

    /**
     * Sorts an array of doubles using Selection Sort.
     * This method is static, thus it can be called as SortComparison.sort(a)
     * @param a: An unsorted array of doubles.
     * @return array sorted in ascending order
     *
     */
    static double [] selectionSort (double a[]){

         //todo: implement the sort
    	for(int i=0; i<a.length-1;i++)
    	{
    		int min = i;
    		for(int j=i+1;j<a.length;j++)
    		{
    			if(a[j] < a[min])
    				min = j;
    		}
    		
    		swap(a,i,min);
    	}
    	return a;
    }//end selectionsort

    /**
     * Sorts an array of doubles using Bubble Sort.
     * This method is static, thus it can be called as SortComparison.sort(a)
     * @param a: An unsorted array of doubles.
     * @return array sorted in ascending order
     *
     */
    static double [] bubbleSort (double a[]){

         //todo: implement the sort
    	
    	for(int i=0;i<a.length;i++)
    	{
    		for(int j=1;j<(a.length-i);j++)
    		{
    			
    			if(a[j-1] > a[j])
    			{
    				swap(a,j-1,j);
    			}
    		}
    	}
    	return a;
		 
    }//end bubblesort
    
    //swaps index i and j
    private static double[] swap(double[] a,int i,int j)
    {
    	if(i<a.length && j<a.length && i>=0 && j>=0)
    	{
    		double temp = a[i];
    		a[i] = a[j];
    		a[j] = temp;
    	}
    	return a;
    }


    public static void main(String[] args) {

        //todo: do experiments as per assignment instructions
    }

 }//end class

