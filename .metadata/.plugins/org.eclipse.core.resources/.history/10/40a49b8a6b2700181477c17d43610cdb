import static org.junit.Assert.*;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertNull;

import java.io.File;
import java.util.Scanner;

import org.junit.Test;

public class TSTTest {

  @Test
  public void testEmpty(){
    TST<Integer> trie = new TST<>();
    trie.put("", 100);
    assertEquals("size of an empty trie should be 0",0, trie.size());
    assertFalse("searching an empty trie should return false",trie.contains(""));
    assertNull("getting from an empty trie should return null",trie.get(""));
    assertEquals("number of elements in a list of all elements should be 0",0,trie.keysWithPrefix("").size());
  }
  
  @Test
  public void testAll(){
	  TST<Integer> trie = new TST<>();
	  trie.put("trie", 0);
	  assertEquals("size = 1",1, trie.size());
	  assertNull("getting non-existent element",trie.get(""));
	  assertTrue("getting trie",trie.get("trie").equals(0));
	  assertFalse("searching for non-existent",trie.contains("tri"));
	  assertTrue("searching for trie",trie.contains("trie"));
	  assertEquals("should be 1",1,trie.keysWithPrefix("tr").size());
	  trie.put("trier", 0);
	  trie.put("tried", 0);
	  trie.put("trieee", 0);
	  trie.put("tritrie", 0);
	  trie.put("triard", 0);
	  trie.put("trieric", 0);
	  assertEquals("should be 5",5,trie.keysWithPrefix("trie").size());
  }
  
}
